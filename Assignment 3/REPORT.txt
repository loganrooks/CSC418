
This Project is a collaboration between Logan Rooks and Christopher Sheedy. There are two
parts to the project, Part A and Part B, which have been submitted in folders of the same 
name. To access either part, change your folder to a3/Part A/raytracer, or a3/Part B/raytracer. 
First we will describe Part A:

#### PART A ####

**Running the code**

To compile the code you must be in a3/Part A/raytracer. Simply execute the command "make
raytracer", and then call "./raytracer". Note that we have provided three images to 
demonstrate the working of our program, but running raytracer will only generate the 
image with all three terms of the phong model.

**The code**

We were provided with starter code for all aspects of the raytracer except for the following:

a) Casting rays towards each pixel of the image plane
	For this section we needed to convert the ray to world Space. This was done By Logan Rooks
	in raytracer.cpp under Raytracer::render. Christopher Sheedy added an epsilon term to
	eliminate noise/error in the image. The epsilon term was added using advice from the discussion board.

b) ray-sphere intersection
	For this section we needed to comnplete the UnitSphere::intersect function. This was done
	by Christopher Sheedy, and can be found in scene_object.cpp. For both part b) and c) the 
	course notes were used as reference.

c) ray-unit square intersection
	For this sections we needed to complete the UnitSquare::intersect function. This was done 
	by Logan Rooks, and can be found in scene_object.cpp

d) Phong illumination
	For this section we needed to complete Phong illumination in the PointLight::shade 
	function. This was done by Christopher Sheedy and can be found in light_source.cpp.

#### PART B ####

**Running the code**

To compile the code you must be in a3/Part B/raytracer. Execute the command "make raytracer" and then call "./raytracer".
Note that we have provided all images to demonstrate the working of our program, and running raytracer WILL generate that full set of images.

**The code**

Note that while each section was primarily completed by the student indicated, There was some degree of collaboration
that is not explicitly documented.

To better demonstrate the techniques we implemented, we designed several new scenes to render. A standardized scene was
created by Christopher Sheedy called simple_scene to standardize the demonstration. The environment consists of a square
 room with a mirror or painting on one side, a light source in the back corner, and numerous objects floating in front
 of the mirror/painting. Two other environments, based on the Portal games, were created to showcase the effects in a
 flashier way using textures and were created by Logan Rooks. The first one is called portal_scene and consists of two
 portals, a companion cube, "orange goo" and texture mapped floor, ceiling and walls. One of the walls is missing since
 the portals at this point are actually just mirrors and interesting scenes can be set up by placing objects behind the
 camera. The third scene is simple_portal_scene, which includes a small texture mapped rooms with two portals (that
 actual work as portals) as a bonus. It was used just to demonstrate the portal effect.

 To keep our main file clean, we created two new files scenes.cpp and experiments.cpp with their corresponding headers.
 Our scenes are defined and set up as functions in scenes.cpp, while the experiments.cpp contains functions that render
 and save images of scenes portraying each of the effects.

 The completed renderings are in "renderings/", the environment textures for environment mapping are in "environments/"
 and the other textures used are in "textures".

i) Recursive Ray Tracing (Christopher Sheedy)
	For this section we needed to modify the Raytracer::shadeRay function. This was done by
	Christopher Sheedy, and can be found in raytracer.cpp (note that this is in the Part B folder). To implement recursive
	ray tracing, we simply calculated the reflected ray ([1] from stack-exchange), and
	called shadeRay again on it. Then the two colors were combined, with the material property
	reflectIndex (which we added in util.cpp) determining the linear combination. For example, a mirror would have a
	reflectIndex of 1.0. In addition, we added an epsilon term to the reflected ray to reduce noise/errors. The demo
	images for this section are saved as recurseRT#.bmp

ii) Hard Shadows (Logan Rooks)
	For this section we needed to modify the Raytracer::computeShading and PointLight::shade functions. This was done by
	 extending a shadow ray from the point of intersection to each of the point lights and only adding the ambient
	 component of the shading to the ray if the shadow ray intersects an object.

iii) Anti-Aliasing (Christopher Sheedy)
	For this section we implemented 8x anti-aliasing by creating a new function, Raytracer::antiAliasRender8x in raytracer.cpp.
	This was done by Christopher Sheedy. Much of the function is exactly the same as in Raytracer::render, except for the creation 		of rays.
	In render, each pixel gets a single ray through the center of that pixel on the image plane. In antiAliasRender8x,
	we split the pixel on the image plane into 8 quadrants, and then select two random points in each quadrant.
	The idea for this came from wikipedia, it is similar to "Jittering" from [2]. Each ray is shaded, and then the average
	of all 8 rays is computed.

iv) Extended light sources (Christopher Sheedy)
	For this section we added an extended light source in main.cpp.
	This was done by Christopher Sheedy.We approximated the light source by adding a large number of point light sources.
	The light sources were added by randomnly placing lights in a circle centered around a single point. This was done
	by randomnly selecting an angle between 0 and 2pi, and randomnly selecting a radius between 0 and some pre-determined
	radius r.

v) Environment Mapping (Logan Rooks)
    The environment mapping was implemented by mapping rays that did not intersect with any object to one of the faces'
    textures by using UV coordinates. Wikipedia was used to help with the mapping from the rays direction to UV
    coordinates [3]. In Raytracer::shadeRay, an else clause is added for rays that don't intersect with anything to do
    this mapping. The CubeMap is a structure in util.cpp that stores the required variables and functions to implement
    this. Two sets of images were procured, one showing both the environment and its reflection in a sphere and one
    where only the reflection of the environment is visible. The second set, with only the reflection, was done by creating a
     special material called "wormhole" that the sphere would be made of. With this setting on, only the rays that first
      reflected off the sphere and into the environment would be colored.

vi) Texture Mapping (Logan Rooks)
To start, a struct called Texture was created in util.cpp to store variables and functions pertaining to any
specific texture including the width and height of the texture, the RGB arrays, a loading function to actually
retrieve the .bmp file and a function that returns the pixel color given UV coordinates. Since the uv coordinates used
to query the texture are unique to where the ray intersects a textured material, the UV coordinate information is
calculated in each objects intersect function and stored in the Intersection structure to be accessed by the shaders.
The equations used to do this mapping were taken from Wikipedia [4]. Textures are added by initializing them in
SceneNodes and adding that information to the rays if a ray intersects with an object that has a texture. Sources were
also used in determining how to properly read from .bmp files and their format [5]. In the scenes, I texture map onto
planes (walls, portals), spheres (planet, earth at night, moon) and a cube (companion cube).


vii) Refraction (Logan Rooks)
Implemented using Snell's law, equations were taken from both the lecture slides and a tutorial on implementing
refraction in OpenGL (which we did not do but the math was helpful) [6]. The main piece of code added is in
Raytracer::shadeRay by computing a refract_ray using the helper function computeRefraction to determine the direction of
 the ray. The computeRefraction takes both the normal of the surface, the incident vector and the index of refraction
 for the two materials and returns the direction of the refracted ray. The variable refractIndex was added to each
 material.

 viii) Bonus: PORTALS! (Logan Rooks)
 Even though this was not on the list, I've always enjoyed the optical effects of the portals in the Portal games and
 the amazing scenes that can be created with them. All it consists of is linking two objects by constructing
 a transformation matrix that map incident rays on one of the objects to outgoing rays on the other. This special
 transformation matrix (which I called portalTrans) is constructed using both the worldToModel transformation and its
 inverse, the modelToWorld. The pair of portals is defined by specifying the normals to the surface of each respective
 portal and its location. Given the normals, we can construct a rotation matrix using axis-angle, where the axis of
 rotation is the cross product of the normals and the angle between them extracted from their dot product. Since we
 already have function to compute rotation matrices via euler angles, the axis-angle formulation was converted using a
 conversion function already implemented [7]. The translation portion was computed using the difference of the portals'
 locations. It was a fun challenge.



Sources:

[1] Reflection vector equation
https://math.stackexchange.com/questions/13261/how-to-get-a-reflection-vector?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa
[2] https://en.wikipedia.org/wiki/Supersampling
[3] https://en.wikipedia.org/wiki/Cube_mapping
[4] https://en.wikipedia.org/wiki/UV_mapping
[5] http://www.opengl-tutorial.org/beginners-tutorials/tutorial-5-a-textured-cube/
[6] https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-shading/reflection-refraction-fresnel
[7] Conversion of axis-angle to euler angles
http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToEuler/index.htm

Texture Sources:
[1] ApertureCraft - Minecraft Portal Texture Pack: https://www.planetminecraft.com/texture_pack/aperturecraft---a-high-res-portal-2-pack/
[2] Portal Illustrating Tutorial: https://design.tutsplus.com/tutorials/create-a-portal-without-a-portal-gun-in-adobe-illustrator--vector-13240
